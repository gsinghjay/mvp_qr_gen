# Docker Compose configuration for QR Generator
version: '3.8'

services:
  api:
    build: .
    container_name: qr_generator_api
    environment:
      - DATABASE_URL=sqlite:////app/data/qr_codes.db
      - ENVIRONMENT=${ENVIRONMENT:-development} # switch to production and remove hot-reloading for production
      - BASE_URL=${BASE_URL:-http://localhost:8000}
      # SSO Configuration
      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - AZURE_TENANT_ID=${AZURE_TENANT_ID}
      - SESSION_SECRET_KEY=${SESSION_SECRET_KEY}
      - REDIRECT_URI=${REDIRECT_URI:-http://localhost/auth/callback}
    volumes:
      - qr_data:/app/data
      - qr_logs:/logs
      - ./app:/app/app  # Mount app directory for hot reloading (keep as bind mount for development)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=PathPrefix(`/`) && !PathPrefix(`/kc`)"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
      - "traefik.http.routers.api.entrypoints=web,websecure"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.priority=10"
      # Force HTTPS redirect
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true"
      - "traefik.http.middlewares.cors.headers.accesscontrolallowmethods=GET,POST,PUT,DELETE,OPTIONS"
      - "traefik.http.middlewares.cors.headers.accesscontrolalloworiginlist=https://localhost"
      - "traefik.http.middlewares.cors.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.cors.headers.addvaryheader=true"
      - "traefik.http.routers.api.middlewares=redirect-to-https@docker,cors@docker"

  traefik:
    image: traefik:v2.10
    container_name: qr_generator_traefik
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.traefik.address=:8080"
      - "--entrypoints.metrics.address=:8082"
      # Enable TLS with self-signed certificate
      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http.tls.certresolver=default"
      # Use self-signed certificate for local development
      - "--certificatesresolvers.default.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.default.acme.email=dev@localhost"
      - "--certificatesresolvers.default.acme.storage=/certificates/acme.json"
      - "--certificatesresolvers.default.acme.tlschallenge=true"
      # Force HTTP to HTTPS redirect
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      # Enable dashboard
      - "--api.dashboard=true"
      - "--api.insecure=true"
      # Enable Access Logs
      - "--accesslog=true"
      - "--accesslog.filepath=/logs/traefik/access.log"
      - "--accesslog.format=json"
      # Enable Metrics
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.entrypoint=metrics"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik Dashboard
      - "8082:8082"  # Metrics endpoint
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_certs:/certificates
      - traefik_logs:/logs/traefik
    restart: unless-stopped

  # PostgreSQL for Keycloak
  postgres:
    image: postgres:15-alpine
    container_name: keycloak_postgres
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=${KEYCLOAK_DB_USER:-keycloak}
      - POSTGRES_PASSWORD=${KEYCLOAK_DB_PASSWORD:-password}
    volumes:
      - keycloak_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KEYCLOAK_DB_USER:-keycloak}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
  
  # Keycloak service
  keycloak:
    image: quay.io/keycloak/keycloak:22.0.1
    container_name: keycloak
    environment:
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak
      - KC_DB_USERNAME=${KEYCLOAK_DB_USER:-keycloak}
      - KC_DB_PASSWORD=${KEYCLOAK_DB_PASSWORD:-password}
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN:-admin}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:-admin}
      - KC_PROXY=edge
      - KC_HOSTNAME_STRICT=false
      - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_HTTP_ENABLED=true
      - KC_HTTP_RELATIVE_PATH=/kc
      - KC_HOSTNAME_URL=${KEYCLOAK_URL:-https://localhost/kc}
    command:
      - start-dev
      - --hostname-strict=false
    volumes:
      - ./certs:/opt/keycloak/conf:ro
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/opt/keycloak/bin/kc.sh", "show-config"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      default:
        aliases:
          - keycloak.docker.local
    labels:
      - "traefik.enable=true"
      # Use an explicit router name with service name
      - "traefik.http.routers.keycloak-rtr.rule=PathPrefix(`/kc`)"
      - "traefik.http.services.keycloak-svc.loadbalancer.server.port=8080"
      - "traefik.http.routers.keycloak-rtr.entrypoints=web,websecure"
      - "traefik.http.routers.keycloak-rtr.tls=true"
      - "traefik.http.routers.keycloak-rtr.priority=200"
      - "traefik.http.middlewares.keycloak-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.keycloak-rtr.middlewares=redirect-to-https@docker,keycloak-headers@docker"
      # Explicitly set the service for the router
      - "traefik.http.routers.keycloak-rtr.service=keycloak-svc"

networks:
  default:
    name: qr_generator_network
    driver: bridge

volumes:
  qr_data:
    driver: local
  qr_logs:
    driver: local
  traefik_certs:
    driver: local
  traefik_logs:
    driver: local
  keycloak_postgres_data:
    driver: local 