name: Update Wiki Documentation

on:
  push:
    branches: [ main, master ]
    paths:
      - 'README.md'
      - 'GRAFANA.md'
      - 'BACKUP-RESTORE.md'
      - 'WIKI.md'
      - 'scripts/update_wiki.sh'
    paths-ignore:
      - 'CHANGELOG.md'
      - 'pyproject.toml'
      - '.github/workflows/semantic-release.yml'
  workflow_dispatch:  # Allow manual triggering

# Ensure this workflow doesn't interfere with semantic-release
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  update-wiki:
    runs-on: ubuntu-latest
    
    steps:
    - name: Wait for semantic-release completion
      if: github.event_name == 'push'
      run: |
        echo "🔍 Checking for running semantic-release workflows..."
        
        # Wait up to 5 minutes for semantic-release to complete
        max_attempts=30
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "⏳ Attempt $attempt/$max_attempts - Checking for running workflows..."
          
          # Check if semantic-release workflow is running
          running_workflows=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=in_progress&branch=main" \
            | jq -r '.workflow_runs[] | select(.name == "Semantic Release") | .id' || echo "")
          
          if [ -z "$running_workflows" ]; then
            echo "✅ No semantic-release workflow running, proceeding..."
            break
          else
            echo "⏳ Semantic-release workflow still running, waiting 10 seconds..."
            sleep 10
            attempt=$((attempt + 1))
          fi
        done
        
        if [ $attempt -gt $max_attempts ]; then
          echo "⚠️  Timeout waiting for semantic-release, proceeding anyway..."
        fi
        
    - name: Checkout main repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: main  # Always use latest main after semantic-release
        token: ${{ secrets.GITHUB_TOKEN }}  # Ensure we can see latest changes
        
    - name: Checkout wiki repository
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository }}.wiki
        path: wiki
        token: ${{ secrets.WIKI_TOKEN }}
        
    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: Update wiki pages
      run: |
        # Create wiki directory structure
        mkdir -p wiki
        
        # Function to update wiki page from docs
        update_wiki_page() {
            local source_file="$1"
            local wiki_file="$2"
            local description="$3"
            
            if [ -f "$source_file" ]; then
                echo "✅ Updating $wiki_file from $source_file"
                cp "$source_file" "wiki/$wiki_file"
            else
                echo "⚠️ $source_file not found, skipping $description"
            fi
        }
        
        # Function to create/update wiki page with header
        create_wiki_page() {
            local wiki_file="$1"
            local title="$2"
            local source_content="$3"
            
            echo "✅ Creating/updating wiki page: $wiki_file"
            
            # Add wiki header if it doesn't exist
            if [ ! -f "wiki/$wiki_file" ] || ! grep -q "automatically maintained" "wiki/$wiki_file"; then
                cat > "wiki/$wiki_file" << EOF
        # $title
        
        $source_content
        
        ---
        
        *This page is automatically maintained from the main repository. Last updated: $(date '+%Y-%m-%d %H:%M:%S UTC')*
        *For the latest updates, see the [project repository](https://github.com/${{ github.repository }})*
        EOF
            else
                # Update existing page, preserving manual edits but updating timestamp
                sed -i "s/Last updated: .*/Last updated: $(date '+%Y-%m-%d %H:%M:%S UTC')*/" "wiki/$wiki_file"
            fi
        }
        
        # Note: docs/ directory is ignored in .gitignore and not available in public repo
        
        # Update main README content for System Architecture page
        if [ -f "README.md" ]; then
            echo "✅ Updating System Architecture from README.md"
            # Extract architecture section from README
            sed -n '/## Infrastructure Architecture/,/```$/p' README.md > temp_arch.md
            if [ -s temp_arch.md ]; then
                create_wiki_page "System-Architecture.md" "System Architecture" "$(cat temp_arch.md)"
            fi
            rm -f temp_arch.md
        fi
        
        # Update Grafana documentation
        if [ -f "GRAFANA.md" ]; then
            echo "✅ Updating Observatory Overview from GRAFANA.md"
            create_wiki_page "Observatory-Overview.md" "Observatory Overview" "$(cat GRAFANA.md)"
        fi
        
        # Update Backup-Restore documentation
        if [ -f "BACKUP-RESTORE.md" ]; then
            echo "✅ Updating Backup & Recovery Guide from BACKUP-RESTORE.md"
            create_wiki_page "Backup-Recovery-Guide.md" "Backup & Recovery Guide" "$(cat BACKUP-RESTORE.md)"
        fi
        
        # Update Wiki maintenance guide
        if [ -f "WIKI.md" ]; then
            echo "✅ Updating Wiki Maintenance Guide from WIKI.md"
            create_wiki_page "Wiki-Maintenance-Guide.md" "Wiki Maintenance Guide" "$(cat WIKI.md)"
        fi
        
    - name: Check for changes and commit
      run: |
        cd wiki
        
        # Check if there are any changes
        if [ -n "$(git status --porcelain)" ]; then
            echo "📝 Changes detected, committing to wiki..."
            
            # Add all changes
            git add .
            
            # Create commit message
            COMMIT_MSG="Auto-update wiki documentation from main repository
            
        Triggered by: ${{ github.event_name }}
        Commit: ${{ github.sha }}
        Branch: ${{ github.ref_name }}
        
        Updated documentation:
        $(git diff --cached --name-only | sed 's/^/- /')
        
        Source: https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
            
            git commit -m "$COMMIT_MSG"
            
            # Push changes
            echo "🚀 Pushing changes to GitHub wiki..."
            git push origin master
            
            echo "✅ Wiki updated successfully!"
            echo "📚 Wiki URL: https://github.com/${{ github.repository }}/wiki"
            
        else
            echo "ℹ️ No changes detected in wiki"
        fi
        
    - name: Create summary
      run: |
        echo "## Wiki Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Wiki URL**: https://github.com/${{ github.repository }}/wiki" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Updated Pages" >> $GITHUB_STEP_SUMMARY
        
        cd wiki
        if [ -n "$(git log --oneline -1 2>/dev/null)" ]; then
            echo "- ✅ Wiki updated successfully" >> $GITHUB_STEP_SUMMARY
            git diff --name-only HEAD~1 HEAD 2>/dev/null | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY || echo "- Initial wiki setup" >> $GITHUB_STEP_SUMMARY
        else
            echo "- ℹ️ No changes needed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Key Wiki Pages" >> $GITHUB_STEP_SUMMARY
        echo "- [Home](https://github.com/${{ github.repository }}/wiki/Home)" >> $GITHUB_STEP_SUMMARY
        echo "- [Getting Started](https://github.com/${{ github.repository }}/wiki/Getting-Started)" >> $GITHUB_STEP_SUMMARY
        echo "- [Traefik Configuration](https://github.com/${{ github.repository }}/wiki/Traefik-Configuration)" >> $GITHUB_STEP_SUMMARY
        echo "- [Observatory Overview](https://github.com/${{ github.repository }}/wiki/Observatory-Overview)" >> $GITHUB_STEP_SUMMARY
        echo "- [Backup & Recovery Guide](https://github.com/${{ github.repository }}/wiki/Backup-Recovery-Guide)" >> $GITHUB_STEP_SUMMARY
        echo "- [Wiki Maintenance Guide](https://github.com/${{ github.repository }}/wiki/Wiki-Maintenance-Guide)" >> $GITHUB_STEP_SUMMARY 