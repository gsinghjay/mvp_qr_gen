# Dynamic configuration (dynamic_conf.yml)
http:
  routers:
    # --- Goal 1: Dashboard on 10.1.6.12 (Internal IP) ---
    internal-dashboard-router:
      rule: "Host(`10.1.6.12`)" # Covers all paths on this host
      service: api-service
      entryPoints:
        - web # HTTP
      middlewares:
        - redirect-to-https@file
        - ip-whitelist@file      # Internal IPs only
        - dashboard-auth@file    # Basic Auth
        - security-headers@file
      priority: 700 # High priority for specific internal IP

    internal-dashboard-secure-router:
      rule: "Host(`10.1.6.12`)" # Covers all paths on this host
      service: api-service
      entryPoints:
        - websecure # HTTPS
      tls: {}
      middlewares:
        - ip-whitelist@file      # Internal IPs only
        - dashboard-auth@file    # Basic Auth
        - security-headers@file
      priority: 700

    # --- Goal 2: web.hccc.edu (Public Redirect Domain) ---
    web-hccc-qr-redirect-router: # Handles /r/ path
      rule: "Host(`web.hccc.edu`, `130.156.44.52`) && PathPrefix(`/r/`)"
      service: api-service
      entryPoints:
        - web
      middlewares:
        - redirect-to-https@file
        - qr-redirect-rate-limit@file  # Changed from rate-limit@file for classroom scenarios
        - public-endpoints@file  # Allow all IPs for this path
        - security-headers@file
      priority: 650

    web-hccc-qr-redirect-secure-router:
      rule: "Host(`web.hccc.edu`, `130.156.44.52`) && PathPrefix(`/r/`)"
      service: api-service
      entryPoints:
        - websecure
      tls: {}
      middlewares:
        - qr-redirect-rate-limit@file  # Changed from rate-limit@file for classroom scenarios
        - public-endpoints@file
        - security-headers@file
      priority: 650

    web-hccc-static-assets-router: # Handles static assets for restricted page
      rule: "Host(`web.hccc.edu`, `130.156.44.52`) && PathPrefix(`/static/assets/`)"
      service: api-service
      entryPoints:
        - web
      middlewares:
        - redirect-to-https@file
        - public-endpoints@file
        - security-headers@file
      priority: 640 # Needs to be higher than the catch-all redirect

    web-hccc-static-assets-secure-router:
      rule: "Host(`web.hccc.edu`, `130.156.44.52`) && PathPrefix(`/static/assets/`)"
      service: api-service
      entryPoints:
        - websecure
      tls: {}
      middlewares:
        - public-endpoints@file
        - security-headers@file
      priority: 640

    web-hccc-access-restricted-page-router: # Serves the actual restricted page
      rule: "Host(`web.hccc.edu`, `130.156.44.52`) && Path(`/static/access-restricted.html`)" # Exact path
      service: api-service
      entryPoints:
        - web
      middlewares:
        - redirect-to-https@file
        - public-endpoints@file
        - security-headers@file
      priority: 630 # Higher than the catch-all redirect

    web-hccc-access-restricted-page-secure-router:
      rule: "Host(`web.hccc.edu`, `130.156.44.52`) && Path(`/static/access-restricted.html`)"
      service: api-service
      entryPoints:
        - websecure
      tls: {}
      middlewares:
        - public-endpoints@file
        - security-headers@file
      priority: 630

    web-hccc-catch-all-redirect-router: # Catches everything else on web.hccc.edu
      rule: "Host(`web.hccc.edu`, `130.156.44.52`)" # Lowest priority for this host
      service: api-service # Dummy service, middleware handles it
      entryPoints:
        - web
        - websecure # Important: handle for HTTPS too
      tls: {} # For websecure
      middlewares:
        - access-restricted-redirect@file # Redirects to the static page
      priority: 100 # Low priority for this host, catches unmatched paths

    # --- Goal 3: auth.hccc.edu (Placeholder for Keycloak) ---
    auth-hccc-static-assets-router: # Handles static assets for restricted page
      rule: "Host(`auth.hccc.edu`, `130.156.44.53`) && PathPrefix(`/static/assets/`)"
      service: api-service
      entryPoints:
        - web
      middlewares:
        - redirect-to-https@file
        - public-endpoints@file
        - security-headers@file
      priority: 540

    auth-hccc-static-assets-secure-router:
      rule: "Host(`auth.hccc.edu`, `130.156.44.53`) && PathPrefix(`/static/assets/`)"
      service: api-service
      entryPoints:
        - websecure
      tls: {}
      middlewares:
        - public-endpoints@file
        - security-headers@file
      priority: 540

    auth-hccc-access-restricted-page-router: # Serves the actual restricted page
      rule: "Host(`auth.hccc.edu`, `130.156.44.53`) && Path(`/static/access-restricted.html`)"
      service: api-service
      entryPoints:
        - web
      middlewares:
        - redirect-to-https@file
        - public-endpoints@file
        - security-headers@file
      priority: 530

    auth-hccc-access-restricted-page-secure-router:
      rule: "Host(`auth.hccc.edu`, `130.156.44.53`) && Path(`/static/access-restricted.html`)"
      service: api-service
      entryPoints:
        - websecure
      tls: {}
      middlewares:
        - public-endpoints@file
        - security-headers@file
      priority: 530

    auth-hccc-catch-all-redirect-router: # Catches ALL paths on auth.hccc.edu
      rule: "Host(`auth.hccc.edu`, `130.156.44.53`)"
      service: api-service # Dummy service
      entryPoints:
        - web
        - websecure # Important
      tls: {} # For websecure
      middlewares:
        - access-restricted-redirect@file
      priority: 90 # Lowest priority for this host

    # --- Health Check (Public) ---
    health-router:
      rule: "PathPrefix(`/health`)" # Could be Host-specific if needed, but generally public
      service: api-service
      entryPoints:
        - web
      middlewares:
        - redirect-to-https@file
        - public-endpoints@file # Allow all IPs
        - security-headers@file
      priority: 400

    health-secure-router:
      rule: "PathPrefix(`/health`)"
      service: api-service
      entryPoints:
        - websecure
      tls: {}
      middlewares:
        - public-endpoints@file
        - security-headers@file
      priority: 400

    # --- Traefik Dashboard (Internal Only) ---
    dashboard-router: # Renamed for clarity
      rule: "Host(`traefik.10.1.6.12`)" # Or your preferred dashboard host
      service: api@internal # Special Traefik service
      entryPoints:
        - traefik # Make sure this entrypoint is defined in traefik.yml
      middlewares:
        - ip-whitelist@file
        - dashboard-auth@file # Added Basic Auth
      priority: 800 # Very high priority

    # --- Prometheus (Internal Only) ---
    prometheus-router:
      rule: "Host(`prometheus.10.1.6.12`) || (Host(`10.1.6.12`) && PathPrefix(`/prometheus`))"
      service: prometheus-service
      entryPoints:
        - web
      middlewares:
        - redirect-to-https@file
        - ip-whitelist@file
        - dashboard-auth@file
        - security-headers@file
      priority: 750

    prometheus-secure-router:
      rule: "Host(`prometheus.10.1.6.12`) || (Host(`10.1.6.12`) && PathPrefix(`/prometheus`))"
      service: prometheus-service
      entryPoints:
        - websecure
      tls: {}
      middlewares:
        - ip-whitelist@file
        - dashboard-auth@file
        - security-headers@file
      priority: 750

    # --- Grafana (Internal Only) ---
    grafana-router:
      rule: "Host(`grafana.10.1.6.12`) || (Host(`10.1.6.12`) && PathPrefix(`/grafana`))"
      service: grafana-service
      entryPoints:
        - web
      middlewares:
        - redirect-to-https@file
        - ip-whitelist@file
        - dashboard-auth@file
        - security-headers@file
      priority: 740

    grafana-secure-router:
      rule: "Host(`grafana.10.1.6.12`) || (Host(`10.1.6.12`) && PathPrefix(`/grafana`))"
      service: grafana-service
      entryPoints:
        - websecure
      tls: {}
      middlewares:
        - ip-whitelist@file
        - dashboard-auth@file
        - security-headers@file
      priority: 740

    # --- Grafana via webhost.hccc.edu (Internal Only) ---
    grafana-webhost-router:
      rule: "Host(`webhost.hccc.edu`)"
      service: grafana-service
      entryPoints:
        - web
      middlewares:
        - redirect-to-https@file
        - ip-whitelist@file      # Same security as internal access
        - dashboard-auth@file    # Same basic auth
        - grafana-cors-headers@file  # CORS-enabled headers
      priority: 745

    grafana-webhost-secure-router:
      rule: "Host(`webhost.hccc.edu`)"
      service: grafana-service
      entryPoints:
        - websecure
      tls: {}
      middlewares:
        - ip-whitelist@file      # Same security as internal access
        - dashboard-auth@file    # Same basic auth
        - grafana-cors-headers@file  # CORS-enabled headers
      priority: 745

  middlewares:
    redirect-to-https:
      redirectScheme:
        scheme: https
        permanent: true

    access-restricted-redirect:
      redirectRegex:
        regex: "^.*$" # Matches any path
        replacement: "/static/access-restricted.html"
        permanent: false # Important: false, so direct access to the page itself works

    rate-limit:
      rateLimit:
        average: 60
        burst: 10
        period: 1m

    qr-redirect-rate-limit:
      rateLimit:
        average: 300  # 5 requests per second (300/minute) - handles classroom scenarios
        burst: 50     # Allow 50 rapid scans (entire classroom can scan within 10 seconds)
        period: 1m

    ip-whitelist: # For internal dashboard and management
      ipWhiteList:
        sourceRange:
          - "10.1.6.0/23"
          - "127.0.0.1/32"
          - "172.16.0.0/12" # Docker default bridge
          - "192.168.0.0/16" # Common private
          - "10.0.0.0/8" # Common private
          - "69.114.94.0/24" # Your specified external network for admin
          # Add other trusted IPs/ranges for admin access

    public-endpoints: # For truly public paths like /r/ and /health
      ipWhiteList:
        sourceRange:
          - "0.0.0.0/0" # Allow all

    security-headers:
      headers:
        customResponseHeaders:
          X-Content-Type-Options: "nosniff"
          X-Frame-Options: "DENY"
          X-XSS-Protection: "1; mode=block"
        stsSeconds: 31536000
        stsIncludeSubdomains: true
        forceSTSHeader: true
        contentSecurityPolicy: "default-src 'self'; img-src 'self' data:; style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://unpkg.com; font-src 'self' https://cdn.jsdelivr.net; frame-ancestors 'self'; object-src 'none';" # Allows Bootstrap CDN, HTMX and Alpine.js from unpkg.com
        customFrameOptionsValue: "DENY"

    grafana-cors-headers:
      headers:
        customResponseHeaders:
          X-Content-Type-Options: "nosniff"
          X-Frame-Options: "SAMEORIGIN"  # Allow Grafana to frame itself
          X-XSS-Protection: "1; mode=block"
          Access-Control-Allow-Origin: "*"  # Allow all origins for RSS feeds
          Access-Control-Allow-Methods: "GET,POST,OPTIONS,PUT,DELETE,PATCH"
          Access-Control-Allow-Headers: "Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With,X-Grafana-Org-Id,X-Panel-Id,X-Dashboard-Id"
          Access-Control-Allow-Credentials: "true"
          Access-Control-Max-Age: "86400"
        stsSeconds: 31536000
        stsIncludeSubdomains: true
        forceSTSHeader: true
        contentSecurityPolicy: "default-src 'self'; img-src 'self' data: https:; style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net https://fonts.googleapis.com; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://unpkg.com; font-src 'self' https://cdn.jsdelivr.net https://fonts.gstatic.com; frame-ancestors 'self'; object-src 'none'; connect-src 'self' https: wss: https://webhost.hccc.edu https://10.1.6.12 https://grafana.com https://grafana.net;"

    dashboard-auth: # Basic Auth for dashboard/internal routes
      basicAuth:
        usersFile: "/etc/traefik/users.htpasswd"
        realm: "QR System - Authorized Access Only"
        # headerField: "X-WebAuth-User" # Optional: if you want to pass user to backend

  services:
    api-service:
      loadBalancer:
        servers:
          - url: "http://api:8000" # Points to your FastAPI app container
        passHostHeader: true

    prometheus-service:
      loadBalancer:
        servers:
          - url: "http://prometheus:9090"
        passHostHeader: true

    grafana-service:
      loadBalancer:
        servers:
          - url: "http://grafana:3000"
        passHostHeader: true

tls:
  stores:
    default:
      defaultCertificate:
        certFile: /etc/certs/wildcard.crt.pem
        keyFile: /etc/certs/wildcard.key.pem.nopass